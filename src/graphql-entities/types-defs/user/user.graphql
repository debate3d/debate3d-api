type User {
  uid: String!
  name: String
  nickname: String
  email: String
  avatar_id: String # avatar do usuário (todos tem)
  banner_url: String # banner do usuário moderador (somente assinantes)
  created: Timestamp
  cpf: String
  cep: String
  ponts: Int
  facebook: String
  twitter: String
  instagram: String
  site: String
  youtube: String
  subscriber: Boolean
  administrator: Boolean
  is_debater: Boolean
  is_moderator: Boolean
  is_verified: Boolean
  is_moderator_verified: Boolean
  token_device: String # token for enable and send push notifications

  # relations
  # cards without link with private topics
  cards(page: Int!): AllCards!

  # all cards ignoring private topics
  me_cards(page: Int!): AllCards!

  # topics without link with private topics
  topics(page: Int!): TopicsByUser!

  # all topics ignoring private topics
  me_topics(page: Int!): TopicsByUser!

  votes: [ Vote ]
  reactions: [ Reaction ]
  deck: [ Deck ]
}

type TopicsByUser {
  count: Int!
  records: [ Topic ]!
}

type AllUsers {
  count: Int!
  records(page: Int!): [ User ]
}

type AllModerators {
  count: Int!
  records(page: Int!): [ User ]
}

type AllDebaters {
  count: Int!
  records(page: Int!): [ User ]
}

type TokenObject {
  token: String!
}

type UserStats {
  likesReceived: Int!
  dislikesReceived: Int!
  deckReceived: Int!
  votesReceived: Int!
  reactionsGived: Int!
  votesGived: Int!
  cardsCreated: Int!
  topicsCreated: Int!
  deckGived: Int!
}

type userSearch {
  count: Int!
  records: [ User ]!
}

input InputUserFilter {
  email: String
  nickname: String
  is_equal: Boolean
}
