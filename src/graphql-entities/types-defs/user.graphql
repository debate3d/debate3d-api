type User {
  uid: String!
  name: String
  nickname: String
  email: String
  avatar_id: String
  created: Timestamp
  cpf: String
  cep: String
  ponts: Int
  facebook: String
  twitter: String
  instagram: String
  site: String
  youtube: String
  subscriber: Boolean
  administrator: Boolean
  is_debater: Boolean
  is_moderator: Boolean
  is_verified: Boolean
  is_moderator_verified: Boolean
  votes: [ Vote ]
  cards(page: Int!): AllCards!
  reactions: [ Reaction ]
  topics(page: Int!): TopicsByUser!
  deck: [ Deck ]
}

type TopicsByUser {
  count: Int!
  records: [ Topic ]!
}

type AllUsers {
  count: Int!
  records(page: Int!): [ User ]
}

type AllModerators {
  count: Int!
  records(page: Int!): [ User ]
}

type AllDebaters {
  count: Int!
  records(page: Int!): [ User ]
}

type TokenObject {
  token: String!
}

type UserStats {
  likesReceived: Int!
  dislikesReceived: Int!
  deckReceived: Int!
  votesReceived: Int!
  reactionsGived: Int!
  votesGived: Int!
  cardsCreated: Int!
  topicsCreated: Int!
  deckGived: Int!
}

input UserFilter {
  email: String
  nickname: String
  is_equal: Boolean
}
